#!/usr/bin/env bash

# Minecraft Bedrock Edition addon builder
# Usage: ./minecraft-pack-build [OPTIONS]

set -euo pipefail

# Set terminal type for proper color support
export TERM=xterm-256color

##----Check bash version------------------------------------------------------------------------------------------------------------

if [[ "$BASH_VERSION" == 0* ]] || [[ "$BASH_VERSION" == 1* ]] || [[ "$BASH_VERSION" == 2* ]] || [[ "$BASH_VERSION" == 3* ]]; then
  echo "Bash version is too low. Consider upgrading to bash newer than $BASH_VERSION"
  if uname | grep -iq Darwin; then
    echo "Read more on https://itnext.io/upgrading-bash-on-macos-7138bd1066ba"
  fi
  exit 9
fi

# Set terminal type for proper color support
export TERM=xterm-256color
shopt -s extglob

##----Formatting------------------------------------------------------------------------------------------------------------

styler() {
  case "$1" in
  font | text | FONT | TEXT)
    case "$2" in
    black | BLACK) tput setaf 0 ;;
    red | RED) tput setaf 1 ;;
    green | GREEN) tput setaf 2 ;;
    yellow | YELLOW) tput setaf 3 ;;
    blue | BLUE) tput setaf 4 ;;
    purple | PURPLE) tput setaf 5 ;;
    cyan | CYAN) tput setaf 6 ;;
    white | WHITE) tput setaf 7 ;;
    *) tput setaf 9 ;;
    esac
    ;;
  bg | background | BG | BACKGROUND)
    case "$2" in
    reset | REST) tput sgr0 ;;
    black | BLACK) tput setab 0 ;;
    red | RED) tput setab 1 ;;
    green | GREEN) tput setab 2 ;;
    yellow | YELLOW) tput setab 3 ;;
    blue | BLUE) tput setab 4 ;;
    purple | PURPLE) tput setab 5 ;;
    cyan | CYAN) tput setab 6 ;;
    white | WHITE) tput setab 7 ;;
    *) tput setab 9 ;;
    esac
    ;;
  bold | BOLD) tput bold ;;
  reset | REST) tput sgr0 ;;
  esac
}

# Icons
readonly ICON_INFO='☞'
readonly ICON_SUCCESS='✓'
readonly ICON_WARNING='‼'
readonly ICON_ERROR='✗'
readonly ICON_DEBUG=''
readonly ICON_PROMPT='↳'

readonly LOADING_ANIMATION=("⠇" "⠋" "⠙" "⠸" "⠴" "⠦")
readonly LOADING_ANIMATION_FRAME_INTERVAL=0.15

##----Display line------------------------------------------------------------------------------------------------------------

log_message() {
  function _text_format() {
    local _color_value="$1"
    shift
    local _pattern="$1"
    shift
    local _text
    # shellcheck disable=SC2059
    _text=$(printf -- "$_pattern" "$@")
    _text=${_text//<b>/$(styler bold)${_color_value}}
    _text=${_text//<\/b>/$(styler reset)${_color_value}}
    _text=${_text//<u>/$(tput smul)${_color_value}}
    _text=${_text//<\/u>/$(tput rmul)${_color_value}}
    _text=${_text//<code>/$(styler bg 'CYAN')$(styler text 'BLACK')}
    _text=${_text//<\/code>/$(styler reset)${_color_value}}
    echo -e "$_text"
  }
  local _color_value=""
  local _icon=""
  local _line_prepend=""
  local _line_append="\n"
  local _text
  local _status=""
  local POSITIONAL_ARGS=()
  while [[ $# -gt 0 ]]; do
    case $1 in
    -c | --color)
      shift
      _color_value="$(styler text "$1")"
      ;;
    -i | --icon)
      shift
      _icon="$1"
      ;;
    -p | --prepend)
      shift
      _line_prepend="$_line_prepend$1"
      ;;
    -b | --bell)
      _line_prepend="$_line_prepend\a"
      ;;
    -r | --reset)
      _line_prepend="\r$_line_prepend"
      ;;
    -o | --one-line)
      _line_append=""
      ;;
    -s | --status)
      shift
      _status="$1"
      ;;
    *) POSITIONAL_ARGS+=("$1") ;;
    esac
    shift
  done
  set -- "${POSITIONAL_ARGS[@]}"
  # shellcheck disable=SC2059
  _text="$(_text_format "$_color_value" "$@")"
  if [[ -n "$_icon" ]]; then
    _text="$(_text_format "$_color_value" ' <b>%s</b> %s' "$_icon" "$_text")"
  fi
  if [[ -n "$_status" ]]; then
    _text="$(_text_format "$_color_value" '%-*s [<b>%s</b>]' "$(calculate_real_padding 64 "$_text")" "$_text" "$_status")"
  fi
  echo -e -n "${_line_prepend}${_color_value}${_text}${_line_append}$(styler reset)"
}

prepare_log_message() {
  local _color="$1"
  shift
  local _icon="$1"
  shift
  local POSITIONAL_ARGS=()
  while [[ $# -gt 0 ]]; do
    case $1 in
    -c | --color)
      shift
      _color="$1"
      ;;
    -i | --icon)
      shift
      _icon="$1"
      ;;
    *) POSITIONAL_ARGS+=("$1") ;;
    esac
    shift
  done
  set -- "${POSITIONAL_ARGS[@]}"
  log_message --color "$_color" --icon "$_icon" "$@"
}

log_info() {
  prepare_log_message 'CYAN' "$ICON_INFO" "$@"
}

log_success() {
  prepare_log_message 'GREEN' "$ICON_SUCCESS" "$@"
}

log_warning() {
  prepare_log_message 'BLUE' "$ICON_WARNING" "$@"
}

log_error() {
  prepare_log_message 'RED' "$ICON_ERROR" "$@"
}

log_debug() {
  if [[ "${DEBUG:-0}" == "1" || "${debug:-0}" == "1" ]]; then
    prepare_log_message 'PURPLE' "$ICON_DEBUG" "$@"
  fi
}

log_title() {
  local _title="$1"
  local _version="${2:-}"
  local _title_text
  if [[ -n "$_version" ]]; then
    _title_text="${_title} v${_version}"
  else
    _title_text="${_title}"
  fi

  # Calculate padding to center the title
  local _title_length=${#_title_text}
  local _total_width=64
  if [[ "$_title_length" -gt "$_total_width" ]]; then
    _total_width=$((_title_length + 4))
  fi
  if [[ $((_title_length % 2)) -eq 1 ]]; then
    _total_width="$((_total_width - 1))"
  fi
  local _padding=$(((_total_width - _title_length) / 2))

  log_message --color 'WHITE' '<b>╔%s╗</b>' "$(printf '═%.0s' $(seq 1 1 $_total_width))"
  log_message --color 'WHITE' "<b>║%*s$(styler text 'YELLOW')%s%*s$(styler text 'WHITE')║</b>" "$_padding" " " "$_title_text" "$_padding" " "
  log_message --color 'WHITE' '<b>╚%s╝</b>' "$(printf '═%.0s' $(seq 1 1 $_total_width))"
}

log_header() {
  log_message --color 'PURPLE' '<b>%s</b>' "$1"
}

log_usage_title() {
  log_message --color 'PURPLE' '<b>Usage</b> <code>%s %s</code>' "$0" "$*"
}

log_usage_options_line() {
  local _space=30
  local POSITIONAL_ARGS=()
  while [[ $# -gt 0 ]]; do
    case $1 in
    -s | --space)
      shift
      _space="$1"
      ;;
    *) POSITIONAL_ARGS+=("$1") ;;
    esac
    shift
  done
  set -- "${POSITIONAL_ARGS[@]}"
  local _parameters
  IFS=';' read -r -a _parameters <<<"$1"
  shift

  local _padding
  _padding=$(calculate_real_padding "$_space" "${_parameters[*]}")
  _padding=$((_padding + 7 * ${#_parameters[@]}))
  local _options
  _options="$(printf '  %-*s' "$_padding" "$(array_to_string '<b>%s</b>, ' "${_parameters[@]}")")"
  local _message="$1"
  shift
  log_message "${_options} ${_message}" "$@"
}

calculate_real_padding() {
  local _space="$1"
  local _text="$2"
  local _raw_bytes
  _raw_bytes="$(echo -n "${_text//$'\e'[\[(]*([0-9;])[@-n]/}" | wc -c | tr -d ' ')"
  local _text_bytes
  _text_bytes="$(echo -n "$_text" | wc -c | tr -d ' ')"
  local _text_chars
  _text_chars="$(echo -n "$_text" | wc -m | tr -d ' ')"
  local _padding=$((_space + (_text_bytes - _text_chars) + (_text_bytes - _raw_bytes)))
  echo "$_padding"
}

log_usage_example_line() {
  log_message --color 'CYAN' --icon ' $' '<code>%s %s</code>' "$0" "$*"
}

# Die with error message
die() {
  local _error_code="$1"
  shift
  log_error "$@"
  exit "$_error_code"
}

##----Loading animation------------------------------------------------------------------------------------------------------------
loading_animation_pid=""
loading_animation_message=""

loading_animation_loop() {
  local _exit_code=0
  local _exit_trap=0
  local _status=""
  local POSITIONAL_ARGS=()
  while [[ $# -gt 0 ]]; do
    case $1 in
    -m | --message)
      shift
      loading_animation_message="$1"
      ;;
    -t | --time)
      shift
      countdown="$1"
      ;;
    -c | --_exit_code)
      shift
      _exit_code="$1"
      ;;
    -s | --status)
      shift
      _status="$1"
      ;;
    -x) _exit_trap=1 ;;
    *) POSITIONAL_ARGS+=("$1") ;;
    esac
    shift
  done
  set -- "${POSITIONAL_ARGS[@]}"
  if [[ -n "$loading_animation_pid" ]]; then
    kill "$loading_animation_pid" &>/dev/null
    printf "\r%100s\r$(styler reset)" ""
    if [[ "$loading_animation_message" != "" ]]; then
      if [[ "$_exit_code" -gt "0" ]]; then
        log_error --status "$_status" "$loading_animation_message" "$@"
      elif [[ "$_exit_code" -lt "0" ]]; then
        log_warning --status "$_status" "$loading_animation_message" "$@"
      else
        log_success --status "$_status" "$loading_animation_message" "$@"
      fi
      loading_animation_pid=""
      loading_animation_message=""
    fi
  elif [[ "$_exit_trap" -eq "0" ]]; then
    (
      _step=0
      while true; do
        for _frame in "${LOADING_ANIMATION[@]}"; do
          if [[ -n "$loading_animation_message" ]]; then
            log_message --color 'CYAN' --one-line --icon "$_frame" "$loading_animation_message"
            sleep "$LOADING_ANIMATION_FRAME_INTERVAL"
          else
            log_message --color 'CYAN' --one-line 'waiting %s' "$(echo "$countdown - $_step" | bc -z)"
            sleep "1"
          fi
          _step="$((_step + 1))"
          printf "\r"
        done
      done
    ) &
    loading_animation_pid=$!
  fi
}

wait_moment() {
  loading_animation_loop --time "$RETRY_INTERVAL"
  sleep "$RETRY_INTERVAL"
  loading_animation_loop --code 0
}

trap "loading_animation_loop -x;exit" SIGINT
trap "loading_animation_loop -x;exit" EXIT

##----Convert------------------------------------------------------------------------------------------------------------

array_to_string() {
  local _pattern="$1"
  shift
  local _parameters_list
  _parameters_list="$(printf "$_pattern" "$@")"
  echo -n "${_parameters_list::-2}"
}

##----Checking------------------------------------------------------------------------------------------------------------

# Check if command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

check_dependencies() {
  local _deps=("$@")
  local _missing_deps=()
  local _missing_items

  for dep in "${_deps[@]}"; do
    if ! command_exists "$dep"; then
      _missing_deps+=("$dep")
    fi
  done

  if [[ ${#_missing_deps[@]} -gt 0 ]]; then
    _missing_items="$(printf '<b>%s</b>, ' "${_missing_deps[@]}")"
    die 13 'Missing dependencies: %s. Please install them and try again.' "${_missing_items::-2}"
  fi
}

##----USAGE------------------------------------------------------------------------------------------------------------

show_usage() {
  log_usage_title '[OPTIONS]'
  echo
  log_header 'Options'
  log_usage_options_line '-i;--input DIR' \
    'input directory location'
  log_usage_options_line '-o;--output DIR' \
    'output directory location (only for creating mcpack or mcaddon files)'
  log_usage_options_line '-f;--force' \
    'force creation of output directory'
  log_usage_options_line '-m;--mojang DIR' \
    'Mojang directory location, default: <u>%s</u>' "$MOJANG_DIR"
  echo
  log_header 'Build options'
  log_usage_options_line '-a;--mcaddon' \
    'create mcaddon file'
  log_usage_options_line '-p;--mcpack' \
    'create mcpack files'
  log_usage_options_line '-l;--local-installation' \
    'install addon to local Minecraft folder'
  echo
  log_header 'Build modes'
  log_usage_options_line '-b;--no-bump' \
    'do not bump package version'
  log_usage_options_line '-v;--no-version' \
    'do not add version to built file names'
  log_usage_options_line '-t;--no-time' \
    'do not add datetime to built file names'
  log_usage_options_line '-h;--help' \
    'show this help message'
  echo
  log_header 'Examples'
  log_usage_example_line '--input ./my-pack --mcaddon'
  log_usage_example_line '-i ./my-pack -o ./builds --mcpack --no-bump'
  log_usage_example_line '-i ./my-pack --local-installation'
  echo
  exit 0
}

##----Helpers------------------------------------------------------------------------------------------------------------

normalize_name() {
  echo "$1" | sed 's/-/ /g' | awk '{for(i=1;i<=NF;i++){sub(/./,toupper(substr($i,1,1)),$i)}print}' | sed 's/Minecraft Bedrock Addon//g' | sed 's/  / /g'
}

get_wildcard_filename() {
  local _extension="$1"
  local _suffix="${2:-}"
  echo -e "$PACKNAME*${_suffix}*.${_extension}"
}

get_filename() {
  local _extension="$1"
  local _suffix="${2:-}"
  local _name="$PACKNAME"
  if [[ $APPEND_VERSION_TO_BUILD_FILE -eq 1 ]]; then
    _name+=" v$(get_shared_version)"
  fi
  if [[ $APPEND_TIME_TO_BUILD_FILE -eq 1 ]]; then
    _name+=" $(date +'%Y%m%d%H%M%S')"
  fi
  if [[ "$_suffix" != "" ]]; then
    _name+=" $_suffix"
  fi
  echo "${_name}.${_extension}"
}

get_output_dir_name() {
  echo "$(realpath "${OUTPUT_DIR%/}")/"
}

array_to_string() {
  echo "$1" | jq -r 'join(".")'
}

##----Version------------------------------------------------------------------------------------------------------------

get_version_string() {
  # shellcheck disable=SC2317
  array_to_string "$(jq -r '.header.version' "${1}manifest.json")"
}

get_version() {
  # shellcheck disable=SC2317
  echo "$1" | jq '.header.version'
}

get_shared_version() {
  local _version_file="${INPUT_DIR}version.json"
  if [[ -f "$_version_file" ]]; then
    array_to_string "$(jq -r '.version' "$_version_file")"
  else
    die 31 'Version file not found: <b>%s</b>.' "$_version_file"
  fi
}

set_shared_version() {
  local _version_file="${INPUT_DIR}version.json"
  local _version_array="$1"

  # Create version.json if it doesn't exist
  if [[ ! -f "$_version_file" ]]; then
    echo '{"version": [1, 0, 0]}' >"$_version_file"
  fi

  # Update the version in the shared file
  local _current_content
  _current_content=$(cat "$_version_file")
  echo "$_current_content" | jq --argjson ver "$_version_array" '.version = $ver' >"$_version_file"
}

bump_versions() {
  log_info 'Bumping version for BP and RP'
  local _bp_path="${INPUT_DIR}${BP_DIR}manifest.json"
  local _rp_path="${INPUT_DIR}${RP_DIR}manifest.json"

  local _bp_content
  _bp_content=$(cat "$_bp_path")

  local _rp_content
  _rp_content=$(cat "$_rp_path")

  local _bp_uuid
  _bp_uuid="$(echo "$_bp_content" | jq -r '.header.uuid')"

  local _rp_uuid
  _rp_uuid="$(echo "$_rp_content" | jq -r '.header.uuid')"

  # Get current shared version and bump it
  loading_animation_loop -m 'Bumping shared version for BP and RP'
  local _current_shared_version
  _current_shared_version=$(jq -r '.version' "${INPUT_DIR}version.json" 2>/dev/null || echo '[1, 0, 0]')
  local _new_shared_version
  _new_shared_version=$(echo "$_current_shared_version" | jq '.[2] += 1')

  # Update shared version file
  set_shared_version "$_new_shared_version"
  loading_animation_loop -m 'Bumped version to %s' "$(array_to_string "$_new_shared_version")"

  # Update BP manifest
  loading_animation_loop -m 'Saving BP version'
  _bp_content=$(echo "$_bp_content" | jq --argjson ver "$_new_shared_version" '.header.version = $ver')
  _bp_content=$(echo "$_bp_content" | jq --argjson ver "$_new_shared_version" '(.dependencies[]? | select(.uuid == "'"$_rp_uuid"'") | .version) = $ver')
  echo "$_bp_content" >"$_bp_path"
  loading_animation_loop -m 'Saved BP version'

  # Update RP manifest
  loading_animation_loop -m 'Saving RP version'
  _rp_content=$(echo "$_rp_content" | jq --argjson ver "$_new_shared_version" '.header.version = $ver')
  _rp_content=$(echo "$_rp_content" | jq --argjson ver "$_new_shared_version" '(.dependencies[]? | select(.uuid == "'"$_bp_uuid"'") | .version) = $ver')
  echo "$_rp_content" >"$_rp_path"
  loading_animation_loop -m 'Saved RP version'
}

##----Build------------------------------------------------------------------------------------------------------------

build_mcaddon() {
  loading_animation_loop -m 'Preparing MCADDON configuration'
  MC_ADDON_FILE_PATH="$(get_filename 'mcaddon')"
  find "${GET_OUTPUT_DIR_NAME}" -name "$(get_wildcard_filename 'mcaddon')" -type f -exec rm {} \;
  loading_animation_loop -m 'Prepared MCADDON configuration' -s "$GET_OUTPUT_DIR_NAME"

  loading_animation_loop -m 'Creating MCADDON'
  if (cd "$INPUT_DIR" && zip -qr "${GET_OUTPUT_DIR_NAME}${MC_ADDON_FILE_PATH}" "$BP_DIR" "$RP_DIR"); then
    loading_animation_loop -m 'Created MCADDON' -s "${GET_OUTPUT_DIR_NAME}${MC_ADDON_FILE_PATH}"
  else
    loading_animation_loop -m 'Failed to create MCADDON' -c "$?"
  fi
}

build_mcpack() {
  loading_animation_loop -m 'Preparing MCPACK configuration'
  MC_PACK_BP_FILE_PATH="$(get_filename 'mcpack' 'BP')"
  MC_PACK_RP_FILE_PATH="$(get_filename 'mcpack' 'RP')"
  find "${GET_OUTPUT_DIR_NAME}" -name "$(get_wildcard_filename 'mcpack' 'BP')" -type f -exec rm {} \;
  find "${GET_OUTPUT_DIR_NAME}" -name "$(get_wildcard_filename 'mcpack' 'RP')" -type f -exec rm {} \;
  loading_animation_loop -m 'Prepared MCPACK configuration' -s "$GET_OUTPUT_DIR_NAME"

  loading_animation_loop -m 'Creating behavior MCPACK'
  if (cd "$INPUT_DIR$BP_DIR" && zip -qr "${GET_OUTPUT_DIR_NAME}${MC_PACK_BP_FILE_PATH}" .); then
    loading_animation_loop -m 'Created behavior MCPACK' -s "$MC_PACK_BP_FILE_PATH"
  else
    loading_animation_loop -m 'Failed to create behavior MCPACK' -c "$?"
  fi

  loading_animation_loop -m 'Creating resource MCPACK'
  if (cd "$INPUT_DIR$RP_DIR" && zip -qr "${GET_OUTPUT_DIR_NAME}${MC_PACK_RP_FILE_PATH}" .); then
    loading_animation_loop -m 'Created resource MCPACK' -s "$MC_PACK_RP_FILE_PATH"
  else
    loading_animation_loop -m 'Failed to create resource MCPACK' -c "$?"
  fi
}

install_locally() {
  if [[ ! -d "$MOJANG_DIR" ]]; then
    die 32 'Local mojang path does not exist: <u>%s</u>.' "$MOJANG_DIR"
  fi

  loading_animation_loop -m 'Preparing installation'
  find "${MOJANG_DIR}behavior_packs/" -name "$(get_wildcard_filename 'mcpack' 'BP')" -type f -exec rm {} \;
  find "${MOJANG_DIR}resource_packs/" -name "$(get_wildcard_filename 'mcpack' 'RP')" -type f -exec rm {} \;
  loading_animation_loop -m 'Prepared installation' -s "$MOJANG_DIR"

  loading_animation_loop -m 'Installing BP on local'
  mkdir -p "${MOJANG_DIR}behavior_packs/"
  cp -r "${GET_OUTPUT_DIR_NAME}${MC_PACK_BP_FILE_PATH}" "${MOJANG_DIR}behavior_packs/"
  loading_animation_loop -m 'Installed BP on local' -s "behavior_packs/${MC_PACK_BP_FILE_PATH}"

  loading_animation_loop -m 'Installing RP on local'
  mkdir -p "${MOJANG_DIR}resource_packs/"
  cp -r "${GET_OUTPUT_DIR_NAME}${MC_PACK_RP_FILE_PATH}" "${MOJANG_DIR}resource_packs/"
  loading_animation_loop -m 'Installed RP on local' -s "resource_packs/${MC_PACK_RP_FILE_PATH}"
}

##----Parser------------------------------------------------------------------------------------------------------------

parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case $1 in
    -i | --input)
      shift
      INPUT_DIR="$1"
      ;;
    -o | --output)
      shift
      OUTPUT_DIR="$1"
      ;;
    -m | --mojang)
      shift
      MOJANG_DIR="$1"
      ;;
    -f | --force)
      OUTPUT_DIR_FORCE=1
      ;;
    -a | --mcaddon) MCADDON=1 ;;
    -p | --mcpack) MCPACK=1 ;;
    -l | --local-installation) INSTALL_ON_LOCAL=1 ;;
    -b | --no-bump) VERSION_BUMP=0 ;;
    -v | --no-version) APPEND_VERSION_TO_BUILD_FILE=0 ;;
    -t | --no-time) APPEND_TIME_TO_BUILD_FILE=0 ;;
    -h | --help) show_usage ;;
    -*)
      log_error 'Unknown option: <b>%s</b>' "$1"
      echo
      show_usage
      ;;
    *)
      log_error 'Unexpected argument: <b>%s</b>' "$1"
      echo
      show_usage
      ;;
    esac
    shift
  done
  if [[ "${INPUT_DIR}" != */ ]]; then
    INPUT_DIR="${INPUT_DIR}/"
  fi
  if [[ -z "$OUTPUT_DIR" ]]; then
    OUTPUT_DIR="${INPUT_DIR}dist/"
  fi
  if [[ "${OUTPUT_DIR}" != */ ]]; then
    OUTPUT_DIR="${OUTPUT_DIR}/"
  fi
  if [[ "${MOJANG_DIR}" != */ ]]; then
    MOJANG_DIR="${MOJANG_DIR}/"
  fi
}

## ##----Configuration------------------------------------------------------------------------------------------------------------

declare -r BP_DIR="BP/"
declare -r RP_DIR="RP/"

## INPUT OPTIONS

MCADDON=0
MCPACK=0
OUTPUT_DIR_FORCE=0
VERSION_BUMP=1
APPEND_VERSION_TO_BUILD_FILE=1
APPEND_TIME_TO_BUILD_FILE=1
INSTALL_ON_LOCAL=0
INPUT_DIR=""
OUTPUT_DIR=""
MOJANG_DIR="$HOME/Library/Application Support/mcpelauncher/games/com.mojang/"

##----Main------------------------------------------------------------------------------------------------------------

log_title "Minecraft Builder"

parse_arguments "$@"

if [[ $MCADDON -ne 1 && $MCPACK -ne 1 && $INSTALL_ON_LOCAL -ne 1 ]]; then
  log_error 'No build options selected.'
  show_usage
fi
if [[ -z "$INPUT_DIR" ]]; then
  die 11 'Source directory is not defined.'
fi
if [[ ! -d "$INPUT_DIR" ]]; then
  die 12 'Source directory <u>%s</u> does not exist.' "$INPUT_DIR"
fi
if [[ ! -d "$OUTPUT_DIR" ]]; then
  if [[ "$OUTPUT_DIR_FORCE" -eq 1 ]]; then
    mkdir "$OUTPUT_DIR"
    log_info 'Created output directory' "$OUTPUT_DIR"
  else
    die 13 'Output directory does not exist: <u>%s</u>. Add <b>--force</b> argument to create missing directory or give another.' "$OUTPUT_DIR"
  fi
fi
if [[ $INSTALL_ON_LOCAL -eq 1 ]] && [[ ! -d "$MOJANG_DIR" ]]; then
  die 14 'Mojang directory does not exist: <u>%s</u>' "$MOJANG_DIR"

fi

GET_OUTPUT_DIR_NAME="$(get_output_dir_name)"
if [[ ! -f "${INPUT_DIR}version.json" ]]; then
  die 21 'Source directory does not contain <u>version.json</u> file: <u>%s</u>' "$INPUT_DIR"
fi
if [[ ! -f "${INPUT_DIR}${BP_DIR}manifest.json" ]]; then
  die 22 'Source directory does not contain <u>manifest.json</u> file: <u>%s</u>' "${INPUT_DIR}${BP_DIR}"
fi
if [[ ! -f "${INPUT_DIR}${RP_DIR}manifest.json" ]]; then
  die 23 'Source directory does not contain <u>manifest.json</u> file: <u>%s</u>' "${INPUT_DIR}${RP_DIR}"
fi

PACKNAME="$(normalize_name "$(cd "$INPUT_DIR" && basename "$(pwd)")")"
log_header 'Building Minecraft packs for <b>%s</b> project' "$PACKNAME"

if [[ $VERSION_BUMP -eq 1 ]]; then
  bump_versions
fi
if [[ $MCADDON -eq 1 ]]; then
  build_mcaddon
fi
if [[ $MCPACK -eq 1 ]]; then
  build_mcpack
fi
if [[ $INSTALL_ON_LOCAL -eq 1 ]]; then
  if [[ $MCPACK -eq 0 ]]; then
    build_mcpack
  fi
  install_locally
fi
