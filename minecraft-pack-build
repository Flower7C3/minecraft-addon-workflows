#!/usr/bin/env bash

# Minecraft Bedrock Edition addon builder
# Usage: ./minecraft-pack-build [OPTIONS]

set -euo pipefail

##----COLORS------------------------------------------------------------------------------------------------------------

declare -r FCOLOR_BLACK="$(tput setaf 0)"
declare -r FCOLOR_RED="$(tput setaf 1)"
declare -r FCOLOR_GREEN="$(tput setaf 2)"
declare -r FCOLOR_YELLOW="$(tput setaf 3)"
declare -r FCOLOR_BLUE="$(tput setaf 4)"
declare -r FCOLOR_PURPLE="$(tput setaf 5)"
declare -r FCOLOR_CYAN="$(tput setaf 6)"
declare -r FCOLOR_WHITE="$(tput setaf 7)"
declare -r FORMAT_BOLD="$(tput bold)"
declare -r FORMAT_RESET="$(tput sgr0)"
declare -r ICON_INFO='ℹ'
declare -r ICON_SUCCESS='✔'
declare -r ICON_WARNING='⚠'
declare -r ICON_ERROR='✘'
declare -r LOADING_ANIMATION=(⠇ ⠋ ⠙ ⠸ ⠴ ⠦)
declare -r LOADING_ANIMATION_FRAME_INTERVAL=0.15

loading_animation_message=""
loading_animation_timer=""
loading_animation_pid=""

##----USAGE------------------------------------------------------------------------------------------------------------

show_usage() {
  echo -e "${FORMAT_BOLD}Usage${FORMAT_RESET}: ${FCOLOR_PURPLE}$0 [OPTIONS]$FORMAT_RESET"
  echo
  log_header "Options"
  log_usage_options_line "input directory location" "-i" "--input DIR"
  log_usage_options_line "output directory location (only for creating mcpack or mcaddon files)" "-o" "--output DIR"
  log_usage_options_line "force creation of output directory" "-f" "--force"
  log_usage_options_line "Mojang directory location, default: <u>$MOJANG_DIR</u>" "-m" "--mojang DIR"
  echo
  log_header "Build options"
  log_usage_options_line "create mcaddon file" "-a" "--mcaddon"
  log_usage_options_line "create mcpack files" "-p" "--mcpack"
  log_usage_options_line "install addon to local Minecraft folder" "-l" "--local-installation"
  echo
  log_header "Build modes"
  log_usage_options_line "do not bump package version" "-b" "--no-bump"
  log_usage_options_line "do not add version to built file names" "-v" "--no-version"
  log_usage_options_line "do not add datetime to built file names" "-t" "--no-time"
  log_usage_options_line "show this help message" "-h" "--help"
  echo
  log_header "Examples"
  log_usage_example_line "$0 --input ./my-pack --mcaddon"
  log_usage_example_line "$0 -i ./my-pack -o ./builds --mcpack --no-bump"
  log_usage_example_line "$0 -i ./my-pack --local-installation"
  echo
  exit 0
}

##----FUNCTIONS------------------------------------------------------------------------------------------------------------

function play_loading_animation_loop() {
  while [ $# -gt 0 ]; do
    case $1 in
    -t | --time)
      shift
      loading_animation_timer="$1"
      ;;
    -m | --message)
      shift
      loading_animation_message="$1"
      ;;
    esac
    shift
  done
  (
    step=0
    while true; do
      for frame in "${LOADING_ANIMATION[@]}"; do
        if [[ "$loading_animation_message" != "" ]]; then
          printf "%s" "$(format_message "$FCOLOR_BLUE" " <b>$frame</b> $loading_animation_message")"
          sleep "$LOADING_ANIMATION_FRAME_INTERVAL"
        else
          printf " waiting ${FCOLOR_BLUE}%s${FORMAT_RESET}s" "$(echo "$loading_animation_timer - $step" | bc -z)"
          sleep "1"
        fi
        step="$((step + 1))"
        printf "\r"
      done
    done
  ) &
  loading_animation_pid=$!
}

function kill_loading_animation_loop() {
  if [[ "$loading_animation_pid" != "" ]]; then
    kill "$loading_animation_pid" &>/dev/null
    printf "\r%100s\r${FORMAT_RESET}${FORMAT_RESET}" ""
    code=0
    status=""
    while [ $# -gt 0 ]; do
      case $1 in
      -c | --code)
        shift
        code="$1"
        ;;
      -s | --status)
        shift
        status="$1"
        ;;
      -m | --message)
        shift
        loading_animation_message="$1"
        ;;
      esac
      shift
    done
    if [[ "$loading_animation_message" != "" ]]; then
      if [[ "$code" -gt "0" ]]; then
        log_error "$loading_animation_message" "$status"
      elif [[ "$code" -lt "0" ]]; then
        log_warning "$loading_animation_message" "$status"
      else
        log_success "$loading_animation_message" "$status"
      fi
    fi
    loading_animation_pid=""
    loading_animation_message=""
    loading_animation_timer=""
  fi
}

function wait_moment() {
  play_loading_animation_loop --time "$RETRY_INTERVAL"
  sleep "$RETRY_INTERVAL"
  kill_loading_animation_loop --code 0
}

trap "kill_loading_animation_loop;exit" SIGINT
trap "kill_loading_animation_loop;exit" EXIT

format_message() {
  local color="$1"
  local message="$2"
  message=${message//<b>/${FORMAT_BOLD}${color}}
  message=${message//<\/b>/${FORMAT_RESET}${color}}
  message=${message//<u>/$(tput smul)${color}}
  message=${message//<\/u>/$(tput rmul)${color}}
  echo -e "${color}${message}${FORMAT_RESET}"
}

log_message() {
  local color
  color="$(eval echo "\$FCOLOR_${1}")"
  local icon
  icon="$(eval echo "\$ICON_${2}")"
  local message="$3"
  local status="${4:-""}"
  local len=32
  local message_len=${#message}
  if [[ "$message_len" -gt "$len" ]]; then
    len="$((message_len + 4))"
  fi
  if [[ "$status" != "" ]]; then
    format_message "$color" "$(printf " <b>%s</b> %-*s [<b>%s</b>]" "$icon" "$len" "$message" "$status")"
  else
    format_message "$color" "$(printf " <b>%s</b> %-*s" "$icon" $len "$message")"
  fi
}

log_title() {
  local title_text="$1"
  local title_length=${#title_text}
  total_width=$((title_length + 4))
  local padding=$(((total_width - title_length) / 2))
  border="$(printf "%*s" "$total_width" "" | tr " " "═")"
  printf "╔%s╗\n" "$border"
  printf "║%*s%s%*s║\n" "$padding" "" "$(format_message "$FCOLOR_YELLOW" "<b>$title_text</b>")" "$padding" ""
  printf "╚%s╝\n" "$border"
}
log_header() {
  format_message "${FORMAT_BOLD}${FCOLOR_WHITE}" "$1"
}
log_info() {
  log_message "BLUE" "INFO" "$1" "${2:-""}"
}
log_success() {
  log_message "GREEN" "SUCCESS" "$1" "${2:-""}"
}
log_warning() {
  log_message "YELLOW" "WARNING" "$1" "${2:-""}"
}
log_error() {
  log_message "RED" "ERROR" "$1" "${2:-""}"
}
die() {
  log_error "$1"
  exit "${2:-1}"
}

log_usage_options_line() {
  local description="$1"
  shift
  local parameters
  parameters="$(printf "%s, " "$@")"
  printf "  ${FCOLOR_PURPLE}%-*s${FORMAT_RESET} %s\n" "30" "${parameters::-2}" "$(format_message "$FCOLOR_CYAN" "$description")"
}
log_usage_example_line() {
  local command="$1"
  format_message "$FCOLOR_PURPLE" "  $command"
}

get_version_string() {
  # shellcheck disable=SC2317
  array_to_string "$(jq -r '.header.version' "${1}manifest.json")"
}

get_version() {
  # shellcheck disable=SC2317
  echo "$1" | jq '.header.version'
}

to_title_case() {
  echo "$1" | sed 's/-/ /g' | awk '{for(i=1;i<=NF;i++){sub(/./,toupper(substr($i,1,1)),$i)}print}'
}

array_to_string() {
  echo "$1" | jq -r 'join(".")'
}

get_shared_version() {
  local version_file="${INPUT_DIR}version.json"
  if [[ -f "$version_file" ]]; then
    array_to_string "$(jq -r '.version' "$version_file")"
  else
    die "Version <b>$version_file</b> file not found" 31
  fi
}

set_shared_version() {
  local version_file="${INPUT_DIR}version.json"
  local version_array="$1"

  # Create version.json if it doesn't exist
  if [[ ! -f "$version_file" ]]; then
    echo '{"version": [1, 0, 0]}' >"$version_file"
  fi

  # Update the version in the shared file
  local current_content
  current_content=$(cat "$version_file")
  echo "$current_content" | jq --argjson ver "$version_array" '.version = $ver' >"$version_file"
}

bump_versions() {
  log_info "Bumping version for BP and RP"
  local bp_path="${INPUT_DIR}${BP_DIR}manifest.json"
  local rp_path="${INPUT_DIR}${RP_DIR}manifest.json"

  local bp_content
  bp_content=$(cat "$bp_path")

  local rp_content
  rp_content=$(cat "$rp_path")

  local bp_uuid
  bp_uuid="$(echo "$bp_content" | jq -r '.header.uuid')"

  local rp_uuid
  rp_uuid="$(echo "$rp_content" | jq -r '.header.uuid')"

  # Get current shared version and bump it
  play_loading_animation_loop -m "Bumping shared version for BP and RP"
  local current_shared_version
  current_shared_version=$(jq -r '.version' "${INPUT_DIR}version.json" 2>/dev/null || echo '[1, 0, 0]')
  local new_shared_version
  new_shared_version=$(echo "$current_shared_version" | jq '.[2] += 1')

  # Update shared version file
  set_shared_version "$new_shared_version"
  kill_loading_animation_loop -m "Bumped version to $(array_to_string "$new_shared_version")"

  # Update BP manifest
  play_loading_animation_loop -m "Saving BP version"
  bp_content=$(echo "$bp_content" | jq --argjson ver "$new_shared_version" '.header.version = $ver')
  bp_content=$(echo "$bp_content" | jq --argjson ver "$new_shared_version" '(.dependencies[]? | select(.uuid == "'"$rp_uuid"'") | .version) = $ver')
  echo "$bp_content" >"$bp_path"
  kill_loading_animation_loop -m "Saved BP version"

  # Update RP manifest
  play_loading_animation_loop -m "Saving RP version"
  rp_content=$(echo "$rp_content" | jq --argjson ver "$new_shared_version" '.header.version = $ver')
  rp_content=$(echo "$rp_content" | jq --argjson ver "$new_shared_version" '(.dependencies[]? | select(.uuid == "'"$bp_uuid"'") | .version) = $ver')
  echo "$rp_content" >"$rp_path"
  kill_loading_animation_loop -m "Saved RP version"
}

get_wildcard_filename() {
  local extension="$1"
  local suffix="${2:-}"
  echo -e "$PACKNAME*${suffix}*.${extension}"
}

get_filename() {
  local extension="$1"
  local suffix="${2:-}"
  local name="$PACKNAME"
  if [[ $APPEND_VERSION_TO_BUILD_FILE -eq 1 ]]; then
    name+=" v$(get_shared_version)"
  fi
  if [[ $APPEND_TIME_TO_BUILD_FILE -eq 1 ]]; then
    name+=" $(date +"%Y%m%d%H%M%S")"
  fi
  if [[ "$suffix" != "" ]]; then
    name+=" $suffix"
  fi
  echo "${name}.${extension}"
}

get_output_dir_name() {
  echo "$(realpath "${OUTPUT_DIR%/}")/"
}

build_mcaddon() {
  play_loading_animation_loop -m "Preparing MCADDON configuration"
  MC_ADDON_FILE_PATH="$(get_filename "mcaddon")"
  find "${GET_OUTPUT_DIR_NAME}" -name "$(get_wildcard_filename "mcaddon")" -type f -exec rm {} \;
  kill_loading_animation_loop -m "Prepared MCADDON configuration" -s "$GET_OUTPUT_DIR_NAME"

  play_loading_animation_loop -m "Creating MCADDON"
  if (cd "$INPUT_DIR" && zip -qr "${GET_OUTPUT_DIR_NAME}${MC_ADDON_FILE_PATH}" "$BP_DIR" "$RP_DIR"); then
    kill_loading_animation_loop -m "Created MCADDON" -s "${GET_OUTPUT_DIR_NAME}${MC_ADDON_FILE_PATH}"
  else
    kill_loading_animation_loop -m "Failed to create MCADDON" -c "$?"
  fi
}

build_mcpack() {
  play_loading_animation_loop -m "Preparing MCPACK configuration"
  MC_PACK_BP_FILE_PATH="$(get_filename "mcpack" "BP")"
  MC_PACK_RP_FILE_PATH="$(get_filename "mcpack" "RP")"
  find "${GET_OUTPUT_DIR_NAME}" -name "$(get_wildcard_filename "mcpack" "BP")" -type f -exec rm {} \;
  find "${GET_OUTPUT_DIR_NAME}" -name "$(get_wildcard_filename "mcpack" "RP")" -type f -exec rm {} \;
  kill_loading_animation_loop -m "Prepared MCPACK configuration" -s "$GET_OUTPUT_DIR_NAME"

  play_loading_animation_loop -m "Creating behavior MCPACK"
  if (cd "$INPUT_DIR$BP_DIR" && zip -qr "${GET_OUTPUT_DIR_NAME}${MC_PACK_BP_FILE_PATH}" .); then
    kill_loading_animation_loop -m "Created behavior MCPACK" -s "$MC_PACK_BP_FILE_PATH"
  else
    kill_loading_animation_loop -m "Failed to create behavior MCPACK" -c "$?"
  fi

  play_loading_animation_loop -m "Creating resource MCPACK"
  if (cd "$INPUT_DIR$RP_DIR" && zip -qr "${GET_OUTPUT_DIR_NAME}${MC_PACK_RP_FILE_PATH}" .); then
    kill_loading_animation_loop -m "Created resource MCPACK" -s "$MC_PACK_RP_FILE_PATH"
  else
    kill_loading_animation_loop -m "Failed to create resource MCPACK" -c "$?"
  fi
}

install_locally() {
  if [[ ! -d "$MOJANG_DIR" ]]; then
    die "Local mojang path <u>$MOJANG_DIR</u> does not exist." 32
  fi

  play_loading_animation_loop -m "Preparing installation"
  find "${MOJANG_DIR}behavior_packs/" -name "$(get_wildcard_filename "mcpack" "BP")" -type f -exec rm {} \;
  find "${MOJANG_DIR}resource_packs/" -name "$(get_wildcard_filename "mcpack" "RP")" -type f -exec rm {} \;
  kill_loading_animation_loop -m "Prepared installation" -s "$MOJANG_DIR"

  play_loading_animation_loop -m "Installing BP on local"
  mkdir -p "${MOJANG_DIR}behavior_packs/"
  cp -r "${GET_OUTPUT_DIR_NAME}${MC_PACK_BP_FILE_PATH}" "${MOJANG_DIR}behavior_packs/"
  kill_loading_animation_loop -m "Installed BP on local" -s "behavior_packs/${MC_PACK_BP_FILE_PATH}"

  play_loading_animation_loop - "Installing RP on local"
  mkdir -p "${MOJANG_DIR}resource_packs/"
  cp -r "${GET_OUTPUT_DIR_NAME}${MC_PACK_RP_FILE_PATH}" "${MOJANG_DIR}resource_packs/"
  kill_loading_animation_loop -m "Installed RP on local" -s "resource_packs/${MC_PACK_RP_FILE_PATH}"
}

parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
    -i | --input)
      shift
      INPUT_DIR="$1"
      ;;
    -o | --output)
      shift
      OUTPUT_DIR="$1"
      ;;
    -m | --mojang)
      shift
      MOJANG_DIR="$1"
      ;;
    -f | --force)
      OUTPUT_DIR_FORCE=1
      ;;
    -a | --mcaddon) MCADDON=1 ;;
    -p | --mcpack) MCPACK=1 ;;
    -l | --local-installation) INSTALL_ON_LOCAL=1 ;;
    -b | --no-bump) VERSION_BUMP=0 ;;
    -v | --no-version) APPEND_VERSION_TO_BUILD_FILE=0 ;;
    -t | --no-time) APPEND_TIME_TO_BUILD_FILE=0 ;;
    -h | --help) show_usage ;;
    *)
      log_error "Unknown option: <b>$1</b>"
      show_usage
      ;;
    esac
    shift
  done
  if [[ "${INPUT_DIR}" != */ ]]; then
    INPUT_DIR="${INPUT_DIR}/"
  fi
  if [[ -z "$OUTPUT_DIR" ]]; then
    OUTPUT_DIR="${INPUT_DIR}dist/"
  fi
  if [[ "${OUTPUT_DIR}" != */ ]]; then
    OUTPUT_DIR="${OUTPUT_DIR}/"
  fi
  if [[ "${MOJANG_DIR}" != */ ]]; then
    MOJANG_DIR="${MOJANG_DIR}/"
  fi
}

## CONFIGURATION

declare -r BP_DIR="BP/"
declare -r RP_DIR="RP/"

## INPUT OPTIONS

MCADDON=0
MCPACK=0
OUTPUT_DIR_FORCE=0
VERSION_BUMP=1
APPEND_VERSION_TO_BUILD_FILE=1
APPEND_TIME_TO_BUILD_FILE=1
INSTALL_ON_LOCAL=0
INPUT_DIR=""
OUTPUT_DIR=""
MOJANG_DIR="$HOME/Library/Application Support/mcpelauncher/games/com.mojang/"

log_title "Minecraft Builder"

parse_arguments "$@"

if [[ $MCADDON -ne 1 && $MCPACK -ne 1 && $INSTALL_ON_LOCAL -ne 1 ]]; then
  log_error "No build options selected."
  show_usage
fi
if [[ -z "$INPUT_DIR" ]]; then
  die "Source directory is not defined." 11
fi
if [[ ! -d "$INPUT_DIR" ]]; then
  die "Source directory <u>$INPUT_DIR</u> does not exist." 12
fi
if [[ ! -d "$OUTPUT_DIR" ]]; then
  if [[ "$OUTPUT_DIR_FORCE" -eq 1 ]]; then
    mkdir "$OUTPUT_DIR"
    log_info "Created output directory" "$OUTPUT_DIR"
  else
    die "Output directory <u>$OUTPUT_DIR</u> does not exist. Add <b>--force</b> argument to create missing directory or give another." 13
  fi
fi
if [[ $INSTALL_ON_LOCAL -eq 1 ]] && [[ ! -d "$MOJANG_DIR" ]]; then
  die "Mojang directory <u>$MOJANG_DIR</u> does not exist." 14

fi

GET_OUTPUT_DIR_NAME="$(get_output_dir_name)"
if [[ ! -f "${INPUT_DIR}version.json" ]]; then
  die "Source directory <u>${INPUT_DIR}</u> does not contain <u>version.json</u> file." 21
fi
if [[ ! -f "${INPUT_DIR}${BP_DIR}manifest.json" ]]; then
  die "Source directory <u>${INPUT_DIR}${BP_DIR}</u> does not contain <u>manifest.json</u> file." 22
fi
if [[ ! -f "${INPUT_DIR}${RP_DIR}manifest.json" ]]; then
  die "Source directory <u>${INPUT_DIR}${RP_DIR}</u> does not contain <u>manifest.json</u> file." 23
fi

PACKNAME="$(cd "$INPUT_DIR" && basename "$(pwd)")"
PACKNAME="$(to_title_case "$PACKNAME")"
log_header "Building Minecraft packs for <b>$PACKNAME</b> project"

if [[ $VERSION_BUMP -eq 1 ]]; then
  bump_versions
fi
if [[ $MCADDON -eq 1 ]]; then
  build_mcaddon
fi
if [[ $MCPACK -eq 1 ]]; then
  build_mcpack
fi
if [[ $INSTALL_ON_LOCAL -eq 1 ]]; then
  if [[ $MCPACK -eq 0 ]]; then
    build_mcpack
  fi
  install_locally
fi
